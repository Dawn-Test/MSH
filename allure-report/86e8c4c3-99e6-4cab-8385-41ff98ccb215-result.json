{"name": "test_login[EBS-0058-Msh1234567]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <script.test_empower.TestEmpower object at 0x000001A15CB5A280>, username = 'EBS-0058', password = 'Msh1234567'\n\n    @pytest.mark.parametrize(\"username, password\", case_data)\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_login(self, username, password):\n        logging.info(\"用例数据如下：用户名：{}，密码：{}\".format(username, password))\n>       self.login_proxy.login(username, password)\n\nscript\\test_empower.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\login_page.py:74: in login\n    self.login_handle.input_username(username)\npage\\login_page.py:46: in input_username\n    self.input_text(self.login_page.find_username(), username)\npage\\login_page.py:23: in find_username\n    return self.get_element(self.username)\nbase\\base.py:15: in get_element\n    element = wait.until(lambda x: x.find_element(*location))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"eb52ad9c2c792c80591e111a45f2b3e1\")>\nmethod = <function BasePage.get_element.<locals>.<lambda> at 0x000001A15C9C03A0>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nd:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "steps": [{"name": "输入用户名", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"d:\\python3.8\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"D:\\PythonTest\\MSH\\page\\login_page.py\", line 46, in input_username\n    self.input_text(self.login_page.find_username(), username)\n  File \"D:\\PythonTest\\MSH\\page\\login_page.py\", line 23, in find_username\n    return self.get_element(self.username)\n  File \"D:\\PythonTest\\MSH\\base\\base.py\", line 15, in get_element\n    element = wait.until(lambda x: x.find_element(*location))\n  File \"d:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 80, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "parameters": [{"name": "username", "value": "'EBS-0058'"}], "start": 1640934607554, "stop": 1640934617642}], "parameters": [{"name": "username", "value": "'EBS-0058'"}, {"name": "password", "value": "'Msh1234567'"}], "start": 1640934607554, "stop": 1640934617657, "uuid": "0a002d6b-f8df-4fa3-a92a-fe2d3bfc5f1d", "historyId": "f9d8f5b431e1aff19f9722519d0e1536", "testCaseId": "cd550a7d7715b1db524404c531e58223", "fullName": "script.test_empower.TestEmpower#test_login", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "run(order=2)"}, {"name": "parentSuite", "value": "script"}, {"name": "suite", "value": "test_empower"}, {"name": "subSuite", "value": "TestEmpower"}, {"name": "host", "value": "L613"}, {"name": "thread", "value": "23232-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "script.test_empower"}]}